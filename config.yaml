---
# Dataset
data_dir: './data/'
datafile: 'projects_2012_2013.csv'
outcome_var: 'fullyfunded_within_60days'
features: ['school_latitude', 'school_longitude', 'school_state',
           'school_metro', 'school_charter', 'school_magnet',
           'teacher_prefix', 'primary_focus_subject', 'primary_focus_area',
           'resource_type', 'poverty_level', 'grade_level',
           'total_price_including_optional_support',
           'students_reached', 'eligible_double_your_impact_match',
           'date_posted', 'datefullyfunded']
time_format: '%m/%d/%y'
time_features:
  start: 'date_posted'
  end: 'datefullyfunded'

# Temporal Validation
data_start_date: '2012-01-01 00:00:00'
start_dates: ['2012-07-01', '2013-01-01', '2013-07-01']
test_train_gap: ['days', 60]
test_month_size: 6
time_column: 'date_posted'

# Preprocessing
drop_vars: ['projectid', 'date_posted', 'datefullyfunded']

datatypes:
  float: []
  Int64: ['students_reached']
  object: []
  time: ['date_posted', 'datefullyfunded']

feature_types:
  categorical: ['school_state', 'school_metro', 'school_charter',
                'school_magnet', 'teacher_prefix', 'primary_focus_subject',
                'primary_focus_area', 'resource_type', 'poverty_level',
                'grade_level', 'eligible_double_your_impact_match']
  continuous: []

test_size: 0.3
random_state: 10
threshold: 0.5
PR_thold: [1, 2, 5, 10, 20, 30, 50]
models: ['Baseline', 'LR', 'KNN', 'DT', 'SVM', 'RF', 'BG']
metrics: ['accuracy', 'f1', 'roc_auc', 'precision', 'recall']
tuning: 'precision'

parameters:

  Baseline:
    strategy: ['uniform']

  LR:
    solver: ['liblinear']
    C: [0.001]
    penalty: ['l1', 'l2']
    random_state: [10]
  
  KNN:
    n_neighbors: [2]
    weights: ['uniform']
    metric: ["euclidean"]
  
  DT:
    criterion: ['gini']
    max_depth: [2]
    max_features: [2]
    random_state: [10]

  SVM:
    C: [0.001]
    penalty: ['l1', 'l2']
    loss: ['squared_hinge']
    dual: [False]
    random_state: [10]
  
  RF:
    max_features: [2]
    random_state: [10]

  AB:
    algorithm: ['SAMME']
    learning_rate: [0.001]
    random_state: [10]
  
  BG:
    max_samples: [0.05]
    n_estimators: [2]
    random_state: [10]
